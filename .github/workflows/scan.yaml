name: Security & Code Scan on PR

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  # ----------------------
  # Trivy Secret Scan
  # ----------------------
  trivy-secret-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy secret scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scanners: secret
          format: table
          exit-code: '1'
          ignore-unfixed: true

  # ----------------------
  # Trivy Vulnerability Scan for repo files
  # ----------------------
  trivy-vuln-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy repo scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: repo
          format: table
          exit-code: '1'
          ignore-unfixed: true

  # ----------------------
  # Python Code Scan
  # ----------------------
  python-code-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Flake8 & Bandit
        run: pip install flake8 bandit
      - name: Run Python syntax check & lint
        run: |
          set -e
          for file in $(find . -name "*.py"); do
            python -m py_compile "$file"
          done
          flake8 . --ignore=E302,E305,W391
          bandit -r . -ll -iii
      - name: Run Python files
        run: |
          set -e
          for file in $(find . -name "*.py"); do
            python "$file"
          done

  # ----------------------
  # Java Scan
  # ----------------------
  java-code-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Compile Java files
        run: |
          set -e
          mkdir -p build
          for file in $(find . -name "*.java"); do
            javac -d build "$file"
          done

  # ----------------------
  # Go Scan
  # ----------------------
  go-code-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Ensure Go module exists
        run: |
          if [ ! -f go.mod ]; then
            go mod init myproject
          fi
          go mod tidy
      - name: Compile, vet, and run Go code
        run: |
          set -e
          go fmt ./...
          go build ./...
          go vet ./...
          for dir in $(find . -type f -name "*.go" -exec dirname {} \; | sort -u); do
            if [ -f "$dir/main.go" ]; then
              (cd "$dir" && go run .)
            fi
          done

  # ----------------------
  # Node/JS/TS Scan
  # ----------------------
  js-ts-code-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - name: Create ESLint flat config
        run: |
          echo "export default [
            {
              languageOptions: {
                globals: {
                  require: 'readonly',
                  console: 'readonly',
                  process: 'readonly',
                  module: 'readonly',
                  __dirname: 'readonly'
                }
              },
              rules: { 'no-undef': 'error' }
            }
          ];" > eslint.config.js
      - name: Install ESLint
        run: npm install -g eslint
      - name: Run ESLint
        run: npx eslint . --ext .js,.ts --max-warnings=0
      - name: Run Node.js files
        run: |
          set -e
          for file in $(find . -name "*.js"); do
            node "$file"
          done

  # ----------------------
  # PHP Scan
  # ----------------------
  php-code-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run PHP syntax check
        run: |
          set -e
          for file in $(find . -name "*.php"); do
            php -l "$file"
          done

  # ----------------------
  # Ruby Scan
  # ----------------------
  ruby-code-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Ruby syntax check
        run: |
          set -e
          for file in $(find . -name "*.rb"); do
            ruby -c "$file"
          done

  # ----------------------
  # Shell Scan
  # ----------------------
  shell-code-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run ShellCheck
        run: |
          set -e
          for file in $(find . -name "*.sh"); do
            shellcheck "$file"
          done

  # ----------------------
  # C / C++ Scan
  # ----------------------
  c-cpp-code-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run C/C++ syntax check
        run: |
          set -e
          # Only scan C and C++ files here
          for file in $(find . -type f \( -name "*.c" -o -name "*.cpp" \)); do
            gcc -fsyntax-only "$file"
          done

  # ----------------------
  # C# Scan
  # ----------------------
  cs-code-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run C# compile check
        run: |
          set -e
          for file in $(find . -name "*.cs"); do
            mcs "$file"
          done
